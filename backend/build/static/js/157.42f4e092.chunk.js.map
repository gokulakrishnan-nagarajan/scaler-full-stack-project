{"version":3,"file":"static/js/157.42f4e092.chunk.js","mappings":"2IAAO,MAAMA,EAAmB,MAEnBC,EAAe,CACxBC,IAAK,SACLC,IAAK,KAGIC,EAA0B,CACnCF,IAAK,Q,2FCPT,QAA4B,0B,kCCA5B,QAA4B,6BAA5B,EAAoE,4BAApE,EAA4G,6B,aCqC5G,QA9BA,SAAmBG,GACf,MAAM,MAAEC,GAAUD,GACZ,QAAEE,EAAO,UAAEC,EAAS,OAAEC,GAAWH,EAEjCI,GAAoBC,EAAAA,EAAAA,GAAeH,GACnCI,GAAkBC,EAAAA,EAAAA,GAAaJ,GAE/BK,GAAWC,EAAAA,EAAAA,MAMjB,OACIC,EAAAA,EAAAA,MAAA,OACIC,UAAW,GAAGC,2CACdC,QAPcZ,IAAY,KAC9BO,EAAS,GAAGM,EAAAA,MAAUb,IAAU,EAMnBc,CAAad,GAASe,SAAA,EAE/BN,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2DAA0DK,SAAA,EACrEN,EAAAA,EAAAA,MAAA,OAAAM,SAAA,EACIC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,aACNC,EAAAA,EAAAA,KAAA,QAAMN,UAAWC,EAAmBI,SAAEf,QAE1CgB,EAAAA,EAAAA,KAAA,OAAKN,UAAWC,EAAoBI,SAAEZ,QAE1CM,EAAAA,EAAAA,MAAA,OAAAM,SAAA,CAAK,WAASV,OAG1B,ECOA,QAlCA,WACI,MAAMY,GAAWC,EAAAA,EAAAA,OAETC,MAAOC,EAAQC,UAAWC,IAAoBC,EAAAA,EAAAA,KACjDC,GAAUA,EAAMzB,QAOrB,OAJA0B,EAAAA,EAAAA,YAAU,KACNR,GAASS,EAAAA,EAAAA,MAAc,GACxB,IAECJ,GACON,EAAAA,EAAAA,KAACW,EAAAA,EAAM,IAGbP,EAAOQ,QAWRZ,EAAAA,EAAAA,KAAA,OACIN,UAAW,GAAGC,uCAAyDI,SAPpEK,EAAOS,KAAK9B,IACfiB,EAAAA,EAAAA,KAACc,EAAS,CAAqB/B,MAAOA,GAAtBA,EAAMC,cALnBgB,EAAAA,EAAAA,KAAA,OAAAD,SAAK,kBAgBpB,ECjCA,QAJA,WACI,OAAOC,EAAAA,EAAAA,KAACe,EAAM,GAClB,C,wDCAO,MAAMzB,EAAeA,CAACJ,EAAQ8B,KACjC,MAAMC,EAAwB,OAARD,QAAQ,IAARA,EAAAA,EAAYvC,EAAAA,GAElC,OACIC,EAAAA,GAAauC,GACb,IACA/B,EAAOgC,eAAerC,EAAAA,GAAwBoC,GAAe,EAIxD7B,EAAkB+B,IAC3B,MACMC,EADc,IAAIC,KAAKF,GACSD,kBAC/BI,EAAMC,GAAQH,EAAkBI,MAAM,KAAKX,KAAKY,GAAQA,EAAIC,UAC5DC,EAAOC,GAAWL,EAAKC,MAAM,KAKpC,OAF6BF,EAAO,MAD/BK,EAAQ,IAAM,IAAM,IAAMC,EAAU,KAAOD,EAAQ,GAAK,KAAO,MAGzC,C","sources":["constants/currency/index.js","webpack://full-stack/./src/components/orders/index.module.scss?00f4","webpack://full-stack/./src/components/orderCard/index.module.scss?dc3c","components/orderCard/index.js","components/orders/index.js","pages/ordersPage/index.js","utils/index.js"],"sourcesContent":["export const DEFAULT_CURRENCY = \"INR\";\n\nexport const CURRENCY_MAP = {\n    INR: \"â‚¹\",\n    USD: \"$\",\n};\n\nexport const CURRENY_PUNCTUATION_MAP = {\n    INR: \"en-IN\",\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"orders_container__D1uzd\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"orderCard_container__P-dpD\",\"order-id\":\"orderCard_order-id__a+puO\",\"date-time\":\"orderCard_date-time__CN1Ka\"};","import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { ORDERS } from \"../../constants/path\";\nimport { formatAmount, formatDateTime } from \"../../utils\";\n\nimport styles from \"./index.module.scss\";\n\nfunction OrderCard(props) {\n    const { order } = props;\n    const { orderId, createdAt, amount } = order;\n\n    const formattedDateTime = formatDateTime(createdAt);\n    const formattedAmount = formatAmount(amount);\n\n    const navigate = useNavigate();\n\n    const onOrderClick = (orderId) => () => {\n        navigate(`${ORDERS}/${orderId}`);\n    };\n\n    return (\n        <div\n            className={`${styles[\"container\"]} flex-column flex-gap-24 cursor-pointer`}\n            onClick={onOrderClick(orderId)}\n        >\n            <div className=\"flex-align-center flex-justify-space-between flex-gap-24\">\n                <div>\n                    <span>Order: </span>\n                    <span className={styles[\"order-id\"]}>{orderId}</span>\n                </div>\n                <div className={styles[\"date-time\"]}>{formattedDateTime}</div>\n            </div>\n            <div>Amount: {formattedAmount}</div>\n        </div>\n    );\n}\n\nexport default OrderCard;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { fetchOrders } from \"../../store/order\";\nimport Loader from \"../loader\";\n\nimport styles from \"./index.module.scss\";\nimport OrderCard from \"../orderCard\";\n\nfunction Orders() {\n    const dispatch = useDispatch();\n\n    const { items: orders, isLoading: isLoadingOrders } = useSelector(\n        (state) => state.order\n    );\n\n    useEffect(() => {\n        dispatch(fetchOrders());\n    }, []);\n\n    if (isLoadingOrders) {\n        return <Loader />;\n    }\n\n    if (!orders.length) {\n        return <div>No order found</div>;\n    }\n\n    const renderOrders = () => {\n        return orders.map((order) => (\n            <OrderCard key={order.orderId} order={order} />\n        ));\n    };\n\n    return (\n        <div\n            className={`${styles[\"container\"]} flex-column flex-align-center p-24`}\n        >\n            {renderOrders()}\n        </div>\n    );\n}\n\nexport default Orders;\n","import React from \"react\";\n\nimport Orders from \"../../components/orders\";\n\nfunction OrdersPage() {\n    return <Orders />;\n}\n\nexport default OrdersPage;\n","import {\n    CURRENCY_MAP,\n    CURRENY_PUNCTUATION_MAP,\n    DEFAULT_CURRENCY,\n} from \"../constants/currency\";\n\nexport const formatAmount = (amount, currency) => {\n    const validCurrency = currency ?? DEFAULT_CURRENCY;\n\n    return (\n        CURRENCY_MAP[validCurrency] +\n        \" \" +\n        amount.toLocaleString(CURRENY_PUNCTUATION_MAP[validCurrency])\n    );\n};\n\nexport const formatDateTime = (dateTimeStr) => {\n    const dateTimeObj = new Date(dateTimeStr);\n    const localeDateTimeStr = dateTimeObj.toLocaleString();\n    const [date, time] = localeDateTimeStr.split(\",\").map((str) => str.trim());\n    const [hours, minutes] = time.split(\":\");\n    const timeTrimmed =\n        (hours % 12 || 12) + \":\" + minutes + \" \" + (hours > 11 ? \"PM\" : \"AM\");\n    const formattedDateTimeStr = date + \" \" + timeTrimmed;\n\n    return formattedDateTimeStr;\n};\n"],"names":["DEFAULT_CURRENCY","CURRENCY_MAP","INR","USD","CURRENY_PUNCTUATION_MAP","props","order","orderId","createdAt","amount","formattedDateTime","formatDateTime","formattedAmount","formatAmount","navigate","useNavigate","_jsxs","className","styles","onClick","ORDERS","onOrderClick","children","_jsx","dispatch","useDispatch","items","orders","isLoading","isLoadingOrders","useSelector","state","useEffect","fetchOrders","Loader","length","map","OrderCard","Orders","currency","validCurrency","toLocaleString","dateTimeStr","localeDateTimeStr","Date","date","time","split","str","trim","hours","minutes"],"sourceRoot":""}